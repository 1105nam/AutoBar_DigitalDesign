// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/09/2018 20:45:00"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          FourBitCounter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module FourBitCounter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clear;
reg CLK;
reg tn0;
reg tn1;
reg tn2;
reg tn3;
reg tn4;
reg tn5;
reg tn6;
reg tn7;
reg tn8;
reg tn9;
reg tn10;
reg tn11;
reg tn12;
reg tn13;
reg tn14;
reg tn15;
// wires                                               
wire a;
wire b;
wire c;
wire d;
wire total_1;
wire total_2;
wire total_3;
wire total_4;

// assign statements (if any)                          
FourBitCounter i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.clear(clear),
	.CLK(CLK),
	.d(d),
	.tn0(tn0),
	.tn1(tn1),
	.tn2(tn2),
	.tn3(tn3),
	.tn4(tn4),
	.tn5(tn5),
	.tn6(tn6),
	.tn7(tn7),
	.tn8(tn8),
	.tn9(tn9),
	.tn10(tn10),
	.tn11(tn11),
	.tn12(tn12),
	.tn13(tn13),
	.tn14(tn14),
	.tn15(tn15),
	.total_1(total_1),
	.total_2(total_2),
	.total_3(total_3),
	.total_4(total_4)
);
initial 
begin 
#1000000 $finish;
end 

// clear
initial
begin
	clear = 1'b1;
end 

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

// tn0
initial
begin
	tn0 = 1'b1;
end 

// tn1
initial
begin
	tn1 = 1'b0;
end 

// tn2
initial
begin
	tn2 = 1'b0;
end 

// tn3
initial
begin
	tn3 = 1'b0;
end 

// tn4
initial
begin
	tn4 = 1'b1;
end 

// tn5
initial
begin
	tn5 = 1'b0;
end 

// tn6
initial
begin
	tn6 = 1'b0;
end 

// tn7
initial
begin
	tn7 = 1'b0;
end 

// tn8
initial
begin
	tn8 = 1'b0;
end 

// tn9
initial
begin
	tn9 = 1'b0;
end 

// tn10
initial
begin
	tn10 = 1'b0;
end 

// tn11
initial
begin
	tn11 = 1'b0;
end 

// tn12
initial
begin
	tn12 = 1'b0;
end 

// tn13
initial
begin
	tn13 = 1'b0;
end 

// tn14
initial
begin
	tn14 = 1'b0;
end 

// tn15
initial
begin
	tn15 = 1'b0;
end 
endmodule

